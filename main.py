"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ç–µ–Ω–¥–µ—Ä—É —Å attribute matching
"""

import sys
import json
import time
from typing import List, Dict, Any, Optional

from app.config.settings import settings
from app.services.elasticsearch_service import ElasticsearchService
from app.services.extractor import ConfigurableTermExtractor
from app.services.semantic_search import SemanticSearchService
from app.services.attribute_matcher import AttributeMatcher


class TenderSearchPipeline:
    """–ü–æ–ª–Ω—ã–π pipeline –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞"""

    def __init__(self):
        self.extractor = ConfigurableTermExtractor()
        self.es_service = ElasticsearchService()
        self.semantic_service = SemanticSearchService()
        self.attribute_matcher = AttributeMatcher()

    def search_products(self,
                       tender: Dict[str, Any],
                       use_semantic: bool = True,
                       use_attribute_matching: bool = True,
                       relevance_threshold: float = None,
                       max_results: int = None) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞

        Args:
            tender: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞
            use_semantic: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            use_attribute_matching: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            relevance_threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (None = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            {
                'products': [...],
                'stats': {...},
                'timings': {...},
                'tender_info': {...}
            }
        """

        start_time = time.time()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result = {
            'products': [],
            'stats': {
                'initial_candidates': 0,
                'after_elasticsearch': 0,
                'after_semantic': 0,
                'after_attribute_matching': 0,
                'suitable_products': 0,
                'avg_match_percentage': 0.0
            },
            'timings': {},
            'tender_info': {
                'name': tender.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'total_characteristics': len(tender.get('characteristics', [])),
                'required_characteristics': sum(
                    1 for c in tender.get('characteristics', [])
                    if c.get('required', False)
                )
            }
        }

        print(f"\n{'='*80}")
        print(f"üîç –ü–û–ò–°–ö –¢–û–í–ê–†–û–í: {result['tender_info']['name']}")
        print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {result['tender_info']['total_characteristics']} "
              f"(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: {result['tender_info']['required_characteristics']})")
        print(f"{'='*80}")

        # –≠–¢–ê–ü 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –ø–æ–∏—Å–∫ –≤ Elasticsearch
        print("\nüìù –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ –≤ Elasticsearch...")
        stage_start = time.time()

        search_terms = self.extractor.extract_from_tender(tender)
        es_results = self.es_service.search_products(
            search_terms,
            size=settings.MAX_SEARCH_RESULTS
        )

        if 'error' in es_results:
            result['error'] = es_results['error']
            return result

        products = es_results.get('candidates', [])
        result['stats']['after_elasticsearch'] = len(products)
        result['timings']['elasticsearch'] = time.time() - stage_start

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {result['timings']['elasticsearch']:.2f}—Å")

        if not products:
            return result

        # –≠–¢–ê–ü 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if use_semantic and len(products) > 20:
            print("\nüß† –≠—Ç–∞–ø 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è...")
            stage_start = time.time()

            products = self.semantic_service.filter_by_similarity(
                tender,
                products,
                threshold=settings.SEMANTIC_THRESHOLD
            )

            products = self.semantic_service.combine_with_es_scores(products)

            result['stats']['after_semantic'] = len(products)
            result['timings']['semantic'] = time.time() - stage_start

            print(f"‚úÖ –ü–æ—Å–ª–µ —Å–µ–º–∞–Ω—Ç–∏–∫–∏: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {result['timings']['semantic']:.2f}—Å")
        else:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ES —Å–∫–æ—Ä—ã –µ—Å–ª–∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å
            for product in products:
                es_score = product.get('elasticsearch_score', 0)
                product['combined_score'] = min(es_score / 10.0, 1.0)

            result['stats']['after_semantic'] = len(products)
            result['timings']['semantic'] = 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        if relevance_threshold is None:
            relevance_threshold = self._calculate_relevance_threshold(products, tender)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        products = [
            p for p in products
            if p.get('combined_score', 0) >= relevance_threshold
        ]

        print(f"\nüìä –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {relevance_threshold:.3f}")
        print(f"   –¢–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(products)}")

        # –≠–¢–ê–ü 3: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if use_attribute_matching and products and tender.get('characteristics'):
            print(f"\nüéØ –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
            stage_start = time.time()

            matched_products = []
            total_match_percentage = 0

            for i, product in enumerate(products):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
                if i > 0 and i % 100 == 0:
                    print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {i}/{len(products)} —Ç–æ–≤–∞—Ä–æ–≤...")

                # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                match_result = self.attribute_matcher.match_product(tender, product)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ —Ç–æ–≤–∞—Ä—É
                product['attribute_match'] = match_result

                # –°—á–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä
                product['final_score'] = self._calculate_final_score(
                    product.get('combined_score', 0),
                    match_result
                )

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã
                if match_result['is_suitable']:
                    matched_products.append(product)
                    total_match_percentage += match_result['match_percentage']
                    result['stats']['suitable_products'] += 1

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–∫–æ—Ä—É
            matched_products.sort(key=lambda x: x['final_score'], reverse=True)

            products = matched_products
            result['stats']['after_attribute_matching'] = len(products)
            result['timings']['attribute_matching'] = time.time() - stage_start

            # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if result['stats']['suitable_products'] > 0:
                result['stats']['avg_match_percentage'] = (
                    total_match_percentage / result['stats']['suitable_products']
                )

            print(f"‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(products)} –∏–∑ {len(products) + (result['stats']['after_semantic'] - len(products))}")
            print(f"   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {result['stats']['avg_match_percentage']:.1f}%")
            print(f"   –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {result['timings']['attribute_matching']:.2f}—Å")
        else:
            result['stats']['after_attribute_matching'] = len(products)
            result['timings']['attribute_matching'] = 0

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if max_results and len(products) > max_results:
            products = products[:max_results]

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result['products'] = products
        result['timings']['total'] = time.time() - start_time

        print(f"\nüìà –ò–¢–û–ì–û:")
        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(products)}")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {result['timings']['total']:.2f}—Å")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ—Ä–∞
        if use_attribute_matching:
            matcher_stats = self.attribute_matcher.get_stats()
            if matcher_stats['total_matches'] > 0:
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ attribute matching:")
                print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matcher_stats['success_rate']:.1%}")
                print(f"   –ß–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matcher_stats['partial_rate']:.1%}")

        return result

    def _calculate_relevance_threshold(self, products: List[Dict],
                                     tender: Dict[str, Any]) -> float:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""

        if not products:
            return 0.2

        scores = [p.get('combined_score', 0) for p in products]
        scores.sort(reverse=True)

        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        char_count = len(tender.get('characteristics', []))

        if char_count <= 3:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–Ω–¥–µ—Ä - –±–µ—Ä–µ–º —Ç–æ–ø 25%
            threshold_index = len(scores) // 4
        elif char_count <= 7:
            # –°—Ä–µ–¥–Ω–∏–π —Ç–µ–Ω–¥–µ—Ä - –±–µ—Ä–µ–º —Ç–æ–ø 35%
            threshold_index = int(len(scores) * 0.35)
        else:
            # –°–ª–æ–∂–Ω—ã–π —Ç–µ–Ω–¥–µ—Ä - –±–µ—Ä–µ–º —Ç–æ–ø 50%
            threshold_index = len(scores) // 2

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        threshold_index = min(threshold_index, 500)

        if threshold_index < len(scores):
            return max(0.15, scores[threshold_index])
        else:
            return 0.15

    def _calculate_final_score(self, relevance_score: float,
                             match_result: Dict[str, Any]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä —Ç–æ–≤–∞—Ä–∞"""

        # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: 40% –ø–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å + 60% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        base_score = 0.4 * relevance_score + 0.6 * match_result['score']

        # –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if match_result['confidence'] > 0.9:
            base_score *= 1.1

        # –ë–æ–Ω—É—Å –∑–∞ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if match_result['match_percentage'] == 100:
            base_score *= 1.15

        return min(1.0, base_score)


def print_results(results: Dict[str, Any], max_show: int = 20, detailed: bool = True):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""

    products = results['products']

    if not products:
        print("\n‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê (—Ç–æ–ø-{min(len(products), max_show)} –∏–∑ {len(products)}):")
    print("="*80)

    for i, product in enumerate(products[:max_show], 1):
        print(f"\n{i}. {product['title']}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")

        if product.get('brand') and product['brand'] != '-':
            print(f"   –ë—Ä–µ–Ω–¥: {product['brand']}")

        # –°–∫–æ—Ä—ã
        print(f"\n   üìä –û—Ü–µ–Ω–∫–∏:")
        print(f"   ‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product.get('final_score', 0):.3f}")

        if 'combined_score' in product:
            print(f"   ‚Ä¢ –ü–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['combined_score']:.3f}")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã attribute matching
        if 'attribute_match' in product:
            match = product['attribute_match']
            print(f"   ‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {match['score']:.3f} "
                  f"({match['match_percentage']:.0f}%)")
            print(f"   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match['confidence']:.3f}")

            if match['total_required'] > 0:
                print(f"\n   ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: "
                      f"{match['matched_required']}/{match['total_required']}")

            if match['total_optional'] > 0:
                print(f"   ‚ûï –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: "
                      f"{match['matched_optional']}/{match['total_optional']}")

            # –î–µ—Ç–∞–ª–∏ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
            if detailed and match['details']:
                print("\n   üìù –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:")

                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
                for detail in match['details']:
                    if detail['required'] and not detail['matched']:
                        char = detail['characteristic']
                        print(f"   ‚ùå {char['name']}: {char['value']} - {detail['reason']}")

                # –ü–æ—Ç–æ–º —Å–æ–≤–ø–∞–≤—à–∏–µ
                shown_matched = 0
                for detail in match['details']:
                    if detail['matched'] and shown_matched < 3:
                        char = detail['characteristic']
                        print(f"   ‚úÖ {char['name']}: {char['value']} - {detail['reason']}")
                        shown_matched += 1

        # –ê—Ç—Ä–∏–±—É—Ç—ã —Ç–æ–≤–∞—Ä–∞
        if product.get('attributes') and detailed:
            print(f"\n   üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã:")
            for attr in product['attributes'][:5]:
                print(f"   ‚Ä¢ {attr['attr_name']}: {attr['attr_value']}")

            if len(product['attributes']) > 5:
                print(f"   ... –∏ –µ—â–µ {len(product['attributes']) - 5} –∞—Ç—Ä–∏–±—É—Ç–æ–≤")

    if len(products) > max_show:
        print(f"\n... –∏ –µ—â–µ {len(products) - max_show} —Ç–æ–≤–∞—Ä–æ–≤")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""

    # –ü—Ä–∏–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞
    tender = {
        "name": "–ë–ª–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–µ–π",
        "okpd2Code": "17.23.13.199",
        "characteristics": [
            {
                "name": "–®–∏—Ä–∏–Ω–∞",
                "value": "> 80 –∏ ‚â§ 90 –ú–ú",
                "type": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è",
                "required": True
            },
            {
                "name": "–î–ª–∏–Ω–∞ ",
                "value": "> 80 –∏ ‚â§ 90 –ú–ú",
                "type": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è",
                "required": True
            },
            {
                "name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –±–ª–æ–∫–µ",
                "value": "‚â• 500 –®–¢",
                "type": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è",
                "required": False
            },

        ]
    }

    try:
        # –°–æ–∑–¥–∞–µ–º pipeline
        pipeline = TenderSearchPipeline()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        results = pipeline.search_products(
            tender,
            use_semantic=True,
            use_attribute_matching=True,
            relevance_threshold=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            max_results=50
        )

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print_results(results, max_show=20, detailed=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥
        if len(sys.argv) > 1 and sys.argv[1] == '--save':
            filename = f"search_results_{int(time.time())}.json"

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_data = {
                'tender': tender,
                'results': {
                    'products': [
                        {
                            'id': p.get('id', ''),
                            'title': p.get('title', ''),
                            'category': p.get('category', ''),
                            'brand': p.get('brand', ''),
                            'final_score': p.get('final_score', 0),
                            'match_percentage': p.get('attribute_match', {}).get('match_percentage', 0),
                            'matched_required': p.get('attribute_match', {}).get('matched_required', 0),
                            'total_required': p.get('attribute_match', {}).get('total_required', 0)
                        }
                        for p in results['products']
                    ],
                    'stats': results['stats'],
                    'timings': results['timings']
                }
            }

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, ensure_ascii=False, indent=2)

            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
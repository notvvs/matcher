"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ç–µ–Ω–¥–µ—Ä—É
"""


import sys
import json

from app.config.settings import settings
from app.services.elasticsearch_service import ElasticsearchService
from app.services.extractor import ConfigurableTermExtractor
from app.services.semantic_search import SemanticSearchService


def search_products(tender_data):
    """
    –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ç–µ–Ω–¥–µ—Ä—É

    Args:
        tender_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞

    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    """

    print(f"\nüîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞: {tender_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
    print("=" * 80)

    # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤
    print("\n1Ô∏è‚É£ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤...")
    extractor = ConfigurableTermExtractor()
    search_terms = extractor.extract_from_tender(tender_data)

    # 2. –ü–æ–∏—Å–∫ –≤ Elasticsearch
    print("\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤ Elasticsearch...")
    es_service = ElasticsearchService()
    es_results = es_service.search_products(search_terms, size=settings.MAX_SEARCH_RESULTS)

    if 'error' in es_results:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {es_results['error']}")
        return []

    es_candidates = es_results.get('candidates', [])
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ ES: {len(es_candidates)} —Ç–æ–≤–∞—Ä–æ–≤")

    if not es_candidates:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []

    # 3. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    print("\n3Ô∏è‚É£ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è...")
    semantic_service = SemanticSearchService()

    semantic_results = semantic_service.filter_by_similarity(
        tender_data,
        es_candidates,
        threshold=settings.SEMANTIC_THRESHOLD,
        top_k=-1  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    )


    # 4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ–≤
    final_products = semantic_service.combine_with_es_scores(semantic_results)
    print(f"‚úÖ –ü–æ—Å–ª–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(final_products)} —Ç–æ–≤–∞—Ä–æ–≤")

    return final_products


def print_results(products, max_show=20):
    """
    –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞

    Args:
        products: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        max_show: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    """

    if not products:
        print("\n‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"\nüìã –ù–ê–ô–î–ï–ù–ù–´–ï –¢–û–í–ê–†–´ (—Ç–æ–ø-{min(len(products), max_show)} –∏–∑ {len(products)}):")
    print("=" * 80)

    for i, product in enumerate(products[:max_show], 1):
        if product['combined_score'] > 0.5:
            print(f"\n{i}. {product['title']}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}")

            if product.get('brand') and product['brand'] != '-':
                print(f"   –ë—Ä–µ–Ω–¥: {product['brand']}")

            # –°–∫–æ—Ä—ã
            print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['combined_score']:.3f}")
            print(f"   ‚îú‚îÄ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å: {product['semantic_score']:.3f}")
            print(f"   ‚îî‚îÄ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {product['normalized_es_score']:.3f}")

            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            if product.get('attributes'):
                print("   –ê—Ç—Ä–∏–±—É—Ç—ã:")
                for attr in product['attributes'][:5]:
                    print(f"      ‚Ä¢ {attr['attr_name']}: {attr['attr_value']}")
                if len(product['attributes']) > 5:
                    print(f"      ... –∏ –µ—â–µ {len(product['attributes']) - 5} –∞—Ç—Ä–∏–±—É—Ç–æ–≤")

        if len(products) > max_show:
            print(f"\n... –∏ –µ—â–µ {len(products) - max_show} —Ç–æ–≤–∞—Ä–æ–≤")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # –ü—Ä–∏–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ API)
    tender = {
        "name": "–§–ª–µ—à-–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å",
        "okpd2Code": "26.20.22.110",
        "characteristics": [
            {
                "name": "–û–±—ä–µ–º –ø–∞–º—è—Ç–∏",
                "value": "‚â• 32 –ì–ë–ê–ô–¢",
                "type": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è",
                "required": True
            },
            {
                "name": "–¢–∏–ø",
                "value": "USB Flash",
                "type": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è",
                "required": True
            },
        ]
    }

    try:
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products = search_products(tender)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_results(products, max_show=1000)

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(sys.argv) > 1 and sys.argv[1] == '--save':
            filename = f"search_results_{int(time.time())}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'tender': tender,
                    'products': products,
                    'total_found': len(products)
                }, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    import time

    main()
from elasticsearch import Elasticsearch
import json

from app.config.settings import settings


class ElasticsearchService:
    """–°–µ—Ä–≤–∏—Å ES —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–æ–≤"""

    def __init__(self, host=None, port=None):
        self.host = host or settings.ELASTICSEARCH_HOST
        self.port = port or settings.ELASTICSEARCH_PORT
        self.index_name = settings.ELASTICSEARCH_INDEX
        self.es = None
        self.connect()

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            self.es = Elasticsearch(**settings.get_elasticsearch_config())

            info = self.es.info()
            print(f"‚úÖ ES –ø–æ–¥–∫–ª—é—á–µ–Ω: {info['version']['number']}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ES: {e}")
            return False

    def search_products(self, search_terms, size=None):
        """–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""

        if not self.es:
            return {'error': 'ES –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}

        if not self.es.indices.exists(index=self.index_name):
            return {'error': f'–ò–Ω–¥–µ–∫—Å {self.index_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}

        print(f"üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô ES –ø–æ–∏—Å–∫:")
        print(f"   - –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å: '{search_terms['search_query']}'")
        print(f"   - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {search_terms.get('must_match_terms', [])}")
        print(f"   - Boost —Ç–µ—Ä–º–∏–Ω–æ–≤: {len(search_terms['boost_terms'])}")

        # –°—Ç—Ä–æ–∏–º –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô ES –∑–∞–ø—Ä–æ—Å
        query = self._build_optimal_elasticsearch_query(search_terms)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        if size:
            query['size'] = size
        query['_source'] = ["title", "category", "brand", "attributes"]

        try:
            response = self.es.search(index=self.index_name, body=query)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            candidates = []
            for hit in response['hits']['hits']:
                source = hit['_source']
                candidates.append({
                    'id': hit['_id'],
                    'title': source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'category': source.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                    'brand': source.get('brand', ''),
                    'elasticsearch_score': hit['_score'],
                    'attributes': source.get('attributes', [])
                })

            result = {
                'candidates': candidates,
                'total_found': response['hits']['total']['value'],
                'max_score': response['hits']['max_score'] or 0,  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
                'search_terms_used': search_terms,
                'query_type': 'optimal_tender_search'
            }

            print(f"‚úÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(candidates)} –∏–∑ {result['total_found']}")
            if result['max_score'] > 0:
                print(f"   - –ú–∞–∫—Å. —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['max_score']:.2f}")
            else:
                print(f"   - –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é")

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ES –ø–æ–∏—Å–∫–∞: {e}")
            return {'error': str(e)}

    def _build_optimal_elasticsearch_query(self, search_terms):
        """üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô ES –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–æ–≤"""

        # 1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø (MUST)
        must_clauses = []

        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù
        if search_terms['search_query']:
            must_clauses.append({
                "bool": {
                    "should": [
                        # –¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                        {
                            "match_phrase": {
                                "title": {
                                    "query": search_terms['search_query'],
                                    "boost": 1.0
                                }
                            }
                        },
                        # –í—Å–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                        {
                            "match": {
                                "title": {
                                    "query": search_terms['search_query'],
                                    "operator": "and",  # –í–°–ï —Å–ª–æ–≤–∞
                                    "boost": 1.0
                                }
                            }
                        },
                        # –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        {
                            "match": {
                                "category": {
                                    "query": search_terms['search_query'],
                                    "boost": 1.0
                                }
                            }
                        },
                        # –í –∞—Ç—Ä–∏–±—É—Ç–∞—Ö (fallback)
                        {
                            "nested": {
                                "path": "attributes",
                                "query": {
                                    "multi_match": {
                                        "query": search_terms['search_query'],
                                        "fields": ["attributes.attr_name", "attributes.attr_value"]
                                    }
                                },
                                "boost": 0.8
                            }
                        }
                    ],
                    "minimum_should_match": 1
                }
            })

        # 2. –ñ–ï–õ–ê–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø –° –í–ï–°–ê–ú–ò (SHOULD)
        should_clauses = []

        # –¢–µ—Ä–º–∏–Ω—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
        multipliers = settings.WEIGHTS['es_field_multipliers']

        for term, weight in search_terms['boost_terms'].items():
            should_clauses.extend([
                # –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–í–´–°–®–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
                {
                    "match": {
                        "title": {
                            "query": term,
                            "boost": weight * multipliers['title']
                        }
                    }
                },
                # –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                {
                    "match": {
                        "category": {
                            "query": term,
                            "boost": weight * multipliers['category']
                        }
                    }
                },
                # –í –±—Ä–µ–Ω–¥–µ
                {
                    "match": {
                        "brand": {
                            "query": term,
                            "boost": weight * multipliers['brand']
                        }
                    }
                },
                # –í –∑–Ω–∞—á–µ–Ω–∏—è—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–û–ß–ï–ù–¨ –í–ê–ñ–ù–û –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
                {
                    "nested": {
                        "path": "attributes",
                        "query": {
                            "match": {
                                "attributes.attr_value": {
                                    "query": term,
                                    "boost": weight * multipliers['attr_value']
                                }
                            }
                        }
                    }
                },
                # –í –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                {
                    "nested": {
                        "path": "attributes",
                        "query": {
                            "match": {
                                "attributes.attr_name": {
                                    "query": term,
                                    "boost": weight * multipliers['attr_name']
                                }
                            }
                        }
                    }
                }
            ])

        # 3. –§–ò–ù–ê–õ–¨–ù–´–ô –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–°
        query = {
            "query": {
                "bool": {
                    "must": must_clauses,  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï (–±–µ–∑ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç)
                    "should": should_clauses,  # –ñ–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å –≤–µ—Å–∞–º–∏ (—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ)
                    "minimum_should_match": 0  # –î–ª—è should –∫–ª–∞—É–∑
                }
            },
            # –¢–æ—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            "sort": [
                {"_score": {"order": "desc"}}
            ]
        }

        return query
from elasticsearch import Elasticsearch
import json


class ElasticsearchService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Elasticsearch"""

    def __init__(self, host="localhost", port=9200):
        self.host = host
        self.port = port
        self.es = None
        self.connect()

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ES"""
        try:
            self.es = Elasticsearch(
                [{"host": self.host, "port": self.port, "scheme": "http"}],
                verify_certs=False,
                ssl_show_warn=False,
                request_timeout=30
            )

            info = self.es.info()
            print(f"‚úÖ ES –ø–æ–¥–∫–ª—é—á–µ–Ω: {info['version']['number']}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ES: {e}")
            return False

    def search_products(self, search_terms, size=None):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º"""

        if not self.es:
            return {'error': 'ES –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}

        if not self.es.indices.exists(index="ipointer_index"):
            return {'error': '–ò–Ω–¥–µ–∫—Å products –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}

        print(f"üîç ES –ø–æ–∏—Å–∫:")
        print(f"   - –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å: '{search_terms['search_query']}'")
        print(f"   - Boost —Ç–µ—Ä–º–∏–Ω–æ–≤: {len(search_terms['boost_terms'])}")

        # –°—Ç—Ä–æ–∏–º ES –∑–∞–ø—Ä–æ—Å
        query = self._build_elasticsearch_query(search_terms)

        # –î–æ–±–∞–≤–ª—è–µ–º size –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if size:
            query['size'] = size

        # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
        query['_source'] = ["title", "category", "brand", "attributes"]

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            response = self.es.search(index="ipointer_index", body=query)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            candidates = []
            for hit in response['hits']['hits']:
                source = hit['_source']
                candidates.append({
                    'id': hit['_id'],
                    'title': source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'category': source.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                    'brand': source.get('brand', ''),
                    'elasticsearch_score': hit['_score'],
                    'attributes': source.get('attributes', [])
                })

            result = {
                'candidates': candidates,
                'total_found': response['hits']['total']['value'],
                'max_score': response['hits']['max_score'],
                'search_terms_used': search_terms,
                'elasticsearch_query': query
            }

            print(f"‚úÖ ES —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(candidates)} –∏–∑ {result['total_found']}")

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ES –ø–æ–∏—Å–∫–∞: {e}")
            return {'error': str(e)}

    def _build_elasticsearch_query(self, search_terms):
        """–°—Ç—Ä–æ–∏–º ES –∑–∞–ø—Ä–æ—Å"""

        should_clauses = []

        # 1. –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
        if search_terms['search_query']:
            should_clauses.extend([
                # –¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                {
                    "match_phrase": {
                        "title": {
                            "query": search_terms['search_query'],
                            "boost": 10.0
                        }
                    }
                },
                # –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                {
                    "multi_match": {
                        "query": search_terms['search_query'],
                        "fields": ["title^5", "category^3"],
                        "type": "best_fields",
                        "boost": 7.0
                    }
                },
                # –í –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                {
                    "nested": {
                        "path": "attributes",
                        "query": {
                            "multi_match": {
                                "query": search_terms['search_query'],
                                "fields": ["attributes.attr_name^2", "attributes.attr_value^3"]
                            }
                        },
                        "boost": 3.0
                    }
                }
            ])

        # 2. –¢–µ—Ä–º–∏–Ω—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
        for term, weight in search_terms['boost_terms'].items():
            should_clauses.extend([
                # –í –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—è—Ö
                {
                    "multi_match": {
                        "query": term,
                        "fields": ["title^3", "category^2", "brand"],
                        "boost": weight
                    }
                },
                # –í –∞—Ç—Ä–∏–±—É—Ç–∞—Ö —Ç–æ–≤–∞—Ä–∞
                {
                    "nested": {
                        "path": "attributes",
                        "query": {
                            "bool": {
                                "should": [
                                    {
                                        "match": {
                                            "attributes.attr_value": {
                                                "query": term,
                                                "boost": 2.0
                                            }
                                        }
                                    },
                                    {
                                        "match": {
                                            "attributes.attr_name": {
                                                "query": term,
                                                "boost": 1.0
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        "boost": weight * 0.8
                    }
                }
            ])

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        query = {
            "query": {
                "bool": {
                    "should": should_clauses,
                    "minimum_should_match": 1
                }
            }
        }

        return query


# –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞
def test_elasticsearch_service():
    """–¢–µ—Å—Ç ES —Å–µ—Ä–≤–∏—Å–∞"""
    es_service = ElasticsearchService()

    if es_service.es:
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        test_terms = {
            'search_query': '–±–ª–æ–∫–∏ –∑–∞–ø–∏—Å–µ–π',
            'boost_terms': {
                '–ø–∞—Å—Ç–µ–ª—å–Ω—ã–π': 3.0,
                '–∫–ª–µ–π–∫–∏–º': 2.6,
                '–∫—Ä–∞–µ–º': 2.2
            }
        }

        result = es_service.search_products(test_terms, size=5)

        if 'candidates' in result:
            print(f"\nüìã –ù–ê–ô–î–ï–ù–û {len(result['candidates'])} –¢–û–í–ê–†–û–í:")
            for i, candidate in enumerate(result['candidates'], 1):
                print(f"{i}. {candidate['title']}")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {candidate['category']}")
                print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {candidate['elasticsearch_score']:.2f}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")


if __name__ == "__main__":
    test_elasticsearch_service()
from elasticsearch import Elasticsearch
import json


class ElasticsearchService:
    """–°–µ—Ä–≤–∏—Å ES —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–æ–≤"""

    def __init__(self, host="localhost", port=9200):
        self.host = host
        self.port = port
        self.es = None
        self.connect()

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            self.es = Elasticsearch(
                [{"host": self.host, "port": self.port, "scheme": "http"}],
                verify_certs=False,
                ssl_show_warn=False,
                request_timeout=30
            )

            info = self.es.info()
            print(f"‚úÖ ES –ø–æ–¥–∫–ª—é—á–µ–Ω: {info['version']['number']}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ES: {e}")
            return False

    def search_products(self, search_terms, size=None):
        """–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""

        if not self.es:
            return {'error': 'ES –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}

        if not self.es.indices.exists(index="ipointer_index"):
            return {'error': '–ò–Ω–¥–µ–∫—Å products –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}

        print(f"üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô ES –ø–æ–∏—Å–∫:")
        print(f"   - –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å: '{search_terms['search_query']}'")
        print(f"   - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {search_terms.get('must_match_terms', [])}")
        print(f"   - Boost —Ç–µ—Ä–º–∏–Ω–æ–≤: {len(search_terms['boost_terms'])}")

        # –°—Ç—Ä–æ–∏–º –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô ES –∑–∞–ø—Ä–æ—Å
        query = self._build_optimal_elasticsearch_query(search_terms)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        if size:
            query['size'] = size
        query['_source'] = ["title", "category", "brand", "attributes"]

        try:
            response = self.es.search(index="ipointer_index", body=query)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            candidates = []
            for hit in response['hits']['hits']:
                source = hit['_source']
                candidates.append({
                    'id': hit['_id'],
                    'title': source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'category': source.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                    'brand': source.get('brand', ''),
                    'elasticsearch_score': hit['_score'],
                    'attributes': source.get('attributes', [])
                })

            result = {
                'candidates': candidates,
                'total_found': response['hits']['total']['value'],
                'max_score': response['hits']['max_score'],
                'search_terms_used': search_terms,
                'query_type': 'optimal_tender_search'
            }

            print(f"‚úÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(candidates)} –∏–∑ {result['total_found']}")
            print(f"   - –ú–∞–∫—Å. —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['max_score']:.2f}")

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ES –ø–æ–∏—Å–∫–∞: {e}")
            return {'error': str(e)}

    def _build_optimal_elasticsearch_query(self, search_terms):
        """üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô ES –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–æ–≤"""

        # 1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø (MUST)
        must_clauses = []

        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù
        if search_terms['search_query']:
            must_clauses.append({
                "bool": {
                    "should": [
                        # –¢–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                        {
                            "match_phrase": {
                                "title": {
                                    "query": search_terms['search_query'],
                                    "boost": 1.0
                                }
                            }
                        },
                        # –í—Å–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                        {
                            "match": {
                                "title": {
                                    "query": search_terms['search_query'],
                                    "operator": "and",  # –í–°–ï —Å–ª–æ–≤–∞
                                    "boost": 1.0
                                }
                            }
                        },
                        # –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        {
                            "match": {
                                "category": {
                                    "query": search_terms['search_query'],
                                    "boost": 1.0
                                }
                            }
                        },
                        # –í –∞—Ç—Ä–∏–±—É—Ç–∞—Ö (fallback)
                        {
                            "nested": {
                                "path": "attributes",
                                "query": {
                                    "multi_match": {
                                        "query": search_terms['search_query'],
                                        "fields": ["attributes.attr_name", "attributes.attr_value"]
                                    }
                                },
                                "boost": 0.8
                            }
                        }
                    ],
                    "minimum_should_match": 1
                }
            })

        # 2. –ñ–ï–õ–ê–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø –° –í–ï–°–ê–ú–ò (SHOULD)
        should_clauses = []

        # –¢–µ—Ä–º–∏–Ω—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
        for term, weight in search_terms['boost_terms'].items():
            should_clauses.extend([
                # –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–í–´–°–®–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
                {
                    "match": {
                        "title": {
                            "query": term,
                            "boost": weight * 2.5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                        }
                    }
                },
                # –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                {
                    "match": {
                        "category": {
                            "query": term,
                            "boost": weight * 1.8
                        }
                    }
                },
                # –í –±—Ä–µ–Ω–¥–µ
                {
                    "match": {
                        "brand": {
                            "query": term,
                            "boost": weight * 1.5
                        }
                    }
                },
                # –í –∑–Ω–∞—á–µ–Ω–∏—è—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–û–ß–ï–ù–¨ –í–ê–ñ–ù–û –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
                {
                    "nested": {
                        "path": "attributes",
                        "query": {
                            "match": {
                                "attributes.attr_value": {
                                    "query": term,
                                    "boost": weight * 2.0  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
                                }
                            }
                        }
                    }
                },
                # –í –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                {
                    "nested": {
                        "path": "attributes",
                        "query": {
                            "match": {
                                "attributes.attr_name": {
                                    "query": term,
                                    "boost": weight * 1.0  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
                                }
                            }
                        }
                    }
                }
            ])

        # 3. –§–ò–ù–ê–õ–¨–ù–´–ô –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–°
        query = {
            "query": {
                "bool": {
                    "must": must_clauses,  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï (–±–µ–∑ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç)
                    "should": should_clauses,  # –ñ–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å –≤–µ—Å–∞–º–∏ (—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ)
                    "minimum_should_match": 0  # –î–ª—è should –∫–ª–∞—É–∑
                }
            },
            # –¢–æ—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            "sort": [
                {"_score": {"order": "desc"}}
            ]
        }

        return query

    def create_test_index_with_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""

        if not self.es:
            print("‚ùå ES –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å
        if self.es.indices.exists(index="products"):
            self.es.indices.delete(index="products")
            print("üóëÔ∏è –°—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å —É–¥–∞–ª–µ–Ω")

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        index_settings = {
            "settings": {
                "number_of_shards": 1,
                "number_of_replicas": 0,
                "analysis": {
                    "analyzer": {
                        "russian_analyzer": {
                            "type": "custom",
                            "tokenizer": "standard",
                            "filter": ["lowercase"]
                        }
                    }
                }
            },
            "mappings": {
                "properties": {
                    "title": {
                        "type": "text",
                        "analyzer": "russian_analyzer",
                        "fields": {"keyword": {"type": "keyword"}}
                    },
                    "category": {
                        "type": "text",
                        "analyzer": "russian_analyzer",
                        "fields": {"keyword": {"type": "keyword"}}
                    },
                    "brand": {
                        "type": "text",
                        "fields": {"keyword": {"type": "keyword"}}
                    },
                    "attributes": {
                        "type": "nested",
                        "properties": {
                            "attr_name": {
                                "type": "text",
                                "analyzer": "russian_analyzer",
                                "fields": {"keyword": {"type": "keyword"}}
                            },
                            "attr_value": {
                                "type": "text",
                                "analyzer": "russian_analyzer",
                                "fields": {"keyword": {"type": "keyword"}}
                            }
                        }
                    }
                }
            }
        }

        self.es.indices.create(index="products", body=index_settings)
        print("‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        test_products = [
            {
                "title": "–õ–∏–ø–∫–∏–µ –±–ª–æ–∫–∏ Post-it 76x76–º–º –ø–∞—Å—Ç–µ–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ 400 –ª–∏—Å—Ç–æ–≤",
                "category": "–ë—É–º–∞–≥–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫",
                "brand": "3M",
                "attributes": [
                    {"attr_name": "–¶–≤–µ—Ç –±—É–º–∞–≥–∏", "attr_value": "–ü–∞—Å—Ç–µ–ª—å–Ω—ã–π"},
                    {"attr_name": "–†–∞–∑–º–µ—Ä", "attr_value": "76x76 –º–º"},
                    {"attr_name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤", "attr_value": "400"},
                    {"attr_name": "–¢–∏–ø", "attr_value": "–° –∫–ª–µ–π–∫–∏–º –∫—Ä–∞–µ–º"}
                ]
            },
            {
                "title": "–ë–ª–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–µ–π Attache –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ 75x75–º–º 100 –ª–∏—Å—Ç–æ–≤",
                "category": "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
                "brand": "Attache",
                "attributes": [
                    {"attr_name": "–¶–≤–µ—Ç –±—É–º–∞–≥–∏", "attr_value": "–ü–∞—Å—Ç–µ–ª—å–Ω—ã–π"},
                    {"attr_name": "–†–∞–∑–º–µ—Ä", "attr_value": "75x75 –º–º"},
                    {"attr_name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤", "attr_value": "100"},
                    {"attr_name": "–¢–∏–ø", "attr_value": "–° –∫–ª–µ–π–∫–∏–º –∫—Ä–∞–µ–º"}
                ]
            },
            {
                "title": "–°—Ç–∏–∫–µ—Ä—ã —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–µ–π 50x50–º–º",
                "category": "–ë—É–º–∞–≥–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫",
                "brand": "Office",
                "attributes": [
                    {"attr_name": "–¶–≤–µ—Ç", "attr_value": "–†–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π"},
                    {"attr_name": "–†–∞–∑–º–µ—Ä", "attr_value": "50x50 –º–º"},
                    {"attr_name": "–¢–∏–ø", "attr_value": "–ö–ª–µ–π–∫–∏–π –∫—Ä–∞–π"}
                ]
            },
            {
                "title": "–®—Ç–µ–º–ø–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Colop –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –∫–æ—Ä–ø—É—Å",
                "category": "–®—Ç–µ–º–ø–µ–ª–∏ –∏ –ø–µ—á–∞—Ç–∏",
                "brand": "Colop",
                "attributes": [
                    {"attr_name": "–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–æ—Ä–ø—É—Å–∞", "attr_value": "–ü–ª–∞—Å—Ç–∏–∫"},
                    {"attr_name": "–¢–∏–ø –º–µ—Ö–∞–Ω–∏–∑–º–∞", "attr_value": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"}
                ]
            },
            {
                "title": "–ü–µ—á–∞—Ç—å —à—Ç–µ–º–ø–µ–ª—å —Å–∞–º–æ–Ω–∞–±–æ—Ä–Ω—ã–π –ø–ª–∞—Å—Ç–∏–∫ –∞–≤—Ç–æ–º–∞—Ç",
                "category": "–û—Ñ–∏—Å–Ω—ã–µ –ø–µ—á–∞—Ç–∏",
                "brand": "Shiny",
                "attributes": [
                    {"attr_name": "–ú–∞—Ç–µ—Ä–∏–∞–ª", "attr_value": "–ü–ª–∞—Å—Ç–∏–∫"},
                    {"attr_name": "–¢–∏–ø", "attr_value": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"}
                ]
            }
        ]

        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        for i, product in enumerate(test_products):
            self.es.index(index="products", id=f"test_{i + 1}", body=product)

        self.es.indices.refresh(index="products")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_products)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")

        return True


# –¢–µ—Å—Ç
def test_optimal_service():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    es_service = ElasticsearchService()

    if es_service.es:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        es_service.create_test_index_with_data()

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (–∫–∞–∫ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞)
        test_terms = {
            'search_query': '–±–ª–æ–∫–∏ –∑–∞–ø–∏—Å–µ–π',
            'must_match_terms': ['–±–ª–æ–∫–∏', '–∑–∞–ø–∏—Å–µ–π', '—Å—Ç–∏–∫–µ—Ä—ã'],
            'boost_terms': {
                '–ø–∞—Å—Ç–µ–ª—å–Ω—ã–π': 4.0,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
                '–∫–ª–µ–π–∫–∏–º': 3.8,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
                '–∫—Ä–∞–µ–º': 3.6,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
                '—Ü–≤–µ—Ç': 1.8,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                '—Ç–∏–ø': 1.6  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            }
        }

        result = es_service.search_products(test_terms, size=10)

        if 'candidates' in result:
            print(f"\nüìã –ù–ê–ô–î–ï–ù–û {len(result['candidates'])} –¢–û–í–ê–†–û–í:")
            for i, candidate in enumerate(result['candidates'], 1):
                print(f"{i}. {candidate['title']}")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {candidate['category']}")
                print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {candidate['elasticsearch_score']:.2f}")
                print()


if __name__ == "__main__":
    test_optimal_service()